{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yield Optimizer","text":"<p>Welcome to the Yield Optimizer documentation. This project enables users to earn yield on stablecoins through AI-powered strategy selection and secure, vault-based fund allocation.</p> <p>Our system is built with a modular, secure, and intelligent architecture that integrates:</p> <ul> <li>On-chain USDC vaults, governed by a multi-signature wallet for secure fund custody</li> <li>User-selected risk levels, allowing deposits into either low-risk or high-risk strategies</li> <li>An AI agent powered by ElizaOS, which analyzes real-time DeFi market conditions using data from CoinGecko, DeFiLlama, and other sources to recommend optimal yield strategies</li> <li>Chainlink Automation, which executes the AI agent's selected strategy on-chain by allocating user funds to the most suitable yield pool</li> </ul> <p>By combining smart contract security with intelligent off-chain automation, Yield Optimizer provides a robust and adaptive platform for maximizing yield\u2014whether you're risk-averse or yield-seeking.</p>"},{"location":"Main%20Contracts/","title":"Main Contracts","text":""},{"location":"Main%20Contracts/#ai-vault-protocol-documentation","title":"AI- VAULT Protocol Documentation","text":"<p>This section provides an overview of the core smart contract interfaces: <code>YVault</code>, <code>IStrategy</code>, and <code>AutomationOwner</code>.</p>"},{"location":"Main%20Contracts/#yvault-core-contract","title":"\ud83d\udd12 YVault Core Contract","text":"<p>The central component for managing deposited assets and shares.</p>"},{"location":"Main%20Contracts/#functions","title":"\u2699\ufe0f Functions","text":""},{"location":"Main%20Contracts/#deposituint256-assets-address-receiver","title":"<code>deposit(uint256 assets, address receiver)</code>","text":"<ul> <li>Description: Allows users to deposit a specified <code>assets</code> amount (e.g., USDC) into the vault.</li> <li>Behavior: Mints and transfers corresponding vault shares to the <code>receiver</code> address.</li> </ul>"},{"location":"Main%20Contracts/#withdrawuint256-assets-address-receiver-address-owner","title":"<code>withdraw(uint256 assets, address receiver, address owner)</code>","text":"<ul> <li>Description: Enables users to burn a specified amount of shares to redeem <code>assets</code> (e.g., USDC) from the vault.</li> <li>Behavior: Transfers the redeemed <code>assets</code> to the <code>receiver</code> address.</li> </ul>"},{"location":"Main%20Contracts/#setstrategyaddress-newstrategy","title":"<code>setStrategy(address newStrategy)</code>","text":"<ul> <li>Description: Updates the active strategy contract that the vault utilizes for deploying funds.</li> <li>Access Control: Callable only by the <code>AutomationOwner</code>.</li> </ul>"},{"location":"Main%20Contracts/#allocatefundsaddress-user-uint256-amount","title":"<code>allocateFunds(address user, uint256 amount)</code>","text":"<ul> <li>Description: Instructs the currently active strategy to deploy a specific <code>amount</code> of deposited funds.</li> <li>Behavior: Internally calls <code>strategy.execute(user, amount)</code>.</li> <li>Access Control: Callable only by the <code>AutomationOwner</code>.</li> </ul>"},{"location":"Main%20Contracts/#pricepershare","title":"<code>pricePerShare()</code>","text":"<ul> <li>Description: Returns the current exchange rate between vault shares and the underlying asset (e.g., USDC).</li> <li>Returns: <code>uint256</code> representing the share-to-asset ratio.</li> </ul>"},{"location":"Main%20Contracts/#istrategy-interface","title":"\ud83c\udfaf IStrategy Interface","text":"<pre><code>interface IStrategy {\n    function execute(address user, uint256 amount) external;\n}\n</code></pre> <ul> <li>Purpose: Defines the standard interface for strategy contracts.</li> <li>Role: Each strategy decides how to deploy the funds allocated by the <code>YVault</code> (e.g., lending to Aave, providing liquidity to Curve, etc.). Strategies are responsible for maximizing returns from the deposited assets.</li> </ul>"},{"location":"Main%20Contracts/#automationowner-contract","title":"\ud83e\udd16 AutomationOwner Contract","text":"<p>This contract serves as a delegated authority, primarily for Chainlink Automation, to safely manage <code>YVault</code> logic.</p>"},{"location":"Main%20Contracts/#purpose","title":"\ud83c\udf1f Purpose","text":"<ul> <li>Acts as the sole authorized entity to call sensitive functions on the <code>YVault</code>, such as <code>setStrategy</code> and <code>allocateFunds</code>.</li> <li>Crucial for enabling decentralized and automated management of <code>YVault</code> operations through Chainlink Automation.</li> </ul>"},{"location":"Main%20Contracts/#functions_1","title":"\u2699\ufe0f Functions","text":""},{"location":"Main%20Contracts/#updatevaultstrategyaddress-vault-address-newstrategy","title":"<code>updateVaultStrategy(address vault, address newStrategy)</code>","text":"<ul> <li>Description: Facilitates the update of a <code>YVault</code>'s active strategy.</li> <li>Access Control: Callable only by the Chainlink Automation Keeper.</li> <li>Behavior: Internally calls <code>vault.setStrategy(newStrategy)</code> on the specified <code>vault</code> contract.</li> </ul>"},{"location":"Main%20Contracts/#setkeeperaddress-newkeeper","title":"<code>setKeeper(address newKeeper)</code>","text":"<ul> <li>Description: Allows the owner to update the authorized Chainlink Keeper address.</li> <li>Access Control: Callable only by the contract owner.</li> </ul>"},{"location":"Main%20Contracts/#access-control-summary","title":"\ud83d\udd11 Access Control Summary","text":"<ul> <li>Vault Owner: The initial deployer of the <code>YVault</code> contract. This ownership may be transferred to a new address after deployment.</li> <li>AutomationOwner: Holds the exclusive authority to manage the execution and strategic deployment of funds within the <code>YVault</code>. This is the single point of control for dynamic vault management.</li> <li>Strategy Contracts: These contracts have no special access rights within the <code>YVault</code> or <code>AutomationOwner</code>. They are passive recipients of funds and instructions, solely responsible for their defined deployment logic.</li> </ul> <p>For a deeper understanding of how these components interact, please refer to the architecture.md document. If you're looking to customize or extend the protocol's functionality, consult the developer-docs.md guide.</p>"},{"location":"ai-agent/","title":"\ud83e\udd16 AI Agent: Off-Chain Market Intelligence","text":"<p>The off-chain AI agent is a core intelligence layer of the Yield Optimizer protocol, built using ElizaOS. It continuously monitors DeFi markets and computes the most suitable strategy based on user risk preferences. The output is stored in ElizaOS Key-Value (KV) storage and accessed by Chainlink Automation to update vault strategy allocations.</p>"},{"location":"ai-agent/#core-responsibilities","title":"\ud83c\udfaf Core Responsibilities","text":"<p>The AI agent is responsible for:</p> <ul> <li>Real-Time Market Analysis: Continuously monitors DeFi market trends, stablecoin yields, and platform-specific APYs using data from sources like CoinGecko, Aave, Morpho, Curve, Defillama and Lookonchain.</li> <li>Strategy Selection: Determines the optimal yield pool based on current market conditions and predefined risk profiles (e.g., low, high).</li> <li>KV Storage of Recommendations: Outputs structured strategy recommendations and stores them under designated keys (e.g., <code>low.json</code>, <code>high.json</code>) in ElizaOS KV storage.</li> </ul>"},{"location":"ai-agent/#workflow-overview","title":"\ud83d\ude80 Workflow Overview","text":"<p>The integration between the AI agent, YVault smart contracts, and Chainlink Automation follows this lifecycle:</p> <ol> <li> <p>User Deposit &amp; Risk Selection    Users deposit USDC into a <code>YVault</code> contract and select a preferred risk level (e.g., low or high).</p> </li> <li> <p>Vault Records Deposit    The <code>YVault</code> registers the deposit but does not immediately allocate funds to a strategy.</p> </li> <li> <p>Periodic AI Execution    The AI agent runs periodically (e.g., every few hours), gathering real-time DeFi data from platforms like Aave, Morpho, Curve, and CoinGecko.</p> </li> <li> <p>Market Classification &amp; Strategy Selection    The agent classifies the market (e.g., uptrend, downtrend, sideways) and chooses the most appropriate pool for each risk level.</p> </li> <li> <p>Result Storage in KV    The selected strategy is stored in ElizaOS KV under separate keys (e.g., <code>low.json</code>, <code>high.json</code>) in the following JSON format:</p> </li> </ol> <pre><code>{\n  \"timestamp\": 1751090934932,\n  \"trend\": \"uptrend\",\n  \"risk\": \"high\",\n  \"selectedPool\": {\n    \"address\": \"363b9e0e-28c4-4153-9fff-f2f9ac2d3a3c\",\n    \"apy\": 6.84981,\n    \"platform\": \"Morpho\",\n    \"asset\": \"USDC\"\n  }\n}\n</code></pre> <ol> <li> <p>Chainlink Automation Trigger    A Chainlink Automation Keeper monitors the KV store. When a new strategy update is detected, it triggers the <code>AutomationOwner.updateVaultStrategy()</code> function.</p> </li> <li> <p>Vault Fund Allocation    After the vault strategy is updated, <code>YVault.allocateFunds()</code> is invoked to allocate both new and idle funds into the selected on-chain strategy.</p> </li> </ol>"},{"location":"ai-agent/#example-decision-logic","title":"\ud83d\udca1 Example Decision Logic","text":"<p>The AI agent\u2019s decision-making process can be configured with various logic models. Some examples include:</p> <ul> <li>Stable Yields + Sideways Market: In periods of market stability and consistent yields (e.g., &gt;4%), the AI may allocate low-risk users to Aave lending markets.</li> <li>Bullish Trends + High APY: In an uptrend scenario, with surging ETH prices and attractive stablecoin yields on Morpho, the AI may choose a high-risk Morpho strategy.</li> </ul>"},{"location":"ai-agent/#extensibility","title":"\ud83d\udd0c Extensibility","text":"<p>The AI agent is designed with flexibility and future-proofing in mind:</p> <ul> <li>New Data Sources: Easily integrate additional data providers such as Pendle, Dune Analytics, or custom smart contract analytics.</li> <li>Custom Risk Rules: Modify thresholds (e.g., volatility, APY floors) to fine-tune how strategies are selected per market regime.</li> <li>Sentiment &amp; Social Data: Extend logic to include social indicators or sentiment analysis from platforms like X (Twitter) or Discord.</li> </ul> <p>For details on expanding protocol support or customizing the ElizaOS integration, refer to the developer-docs.md guide.</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#protocol-architecture-overview","title":"\ud83c\udfdb\ufe0f Protocol Architecture Overview","text":"<p>The YVault protocol is designed with a robust architecture that seamlessly integrates off-chain intelligence with on-chain execution. This is achieved through the strategic connection of off-chain and on-chain components, primarily orchestrated by Chainlink Automation and a permissioned <code>AutomationOwner</code> controller contract.</p>"},{"location":"architecture/#architecture-diagram","title":"\ud83d\udcca Architecture Diagram","text":""},{"location":"architecture/#key-contracts","title":"Key Contracts","text":"<p>The on-chain functionality of the protocol is driven by these core smart contracts:</p>"},{"location":"architecture/#yvault","title":"<code>YVault</code>","text":"<ul> <li>Standard Compliance: An ERC-4626 compliant vault designed specifically for USDC.</li> <li>Functionality: Handles all aspects of asset management, including accepting user deposits, minting and issuing vault shares, and crucially, managing the allocation of deposited funds to the active strategy.</li> </ul>"},{"location":"architecture/#strategy-contracts","title":"Strategy Contracts","text":"<ul> <li>Interface: Each strategy contract adheres to the <code>IStrategy</code> interface, implementing the <code>execute(address user, uint256 amount)</code> function.</li> <li><code>LowRiskAaveStrategy</code>: An example strategy designed to lend deposited USDC into stable, low-risk markets on Aave.</li> <li><code>HighRiskMorphoStrategy</code>: An example strategy focused on allocating funds to higher-risk, potentially higher-yield opportunities, such as those found on Morpho Blue or certain Curve-like vaults.</li> </ul>"},{"location":"architecture/#automationowner","title":"<code>AutomationOwner</code>","text":"<ul> <li>Controller Role: This contract acts as the sole authorized entity responsible for calling sensitive vault functions, specifically <code>setStrategy()</code>.</li> <li>Permissioned Access: It is the only address granted permission to be called by Chainlink Automation, serving as a secure gateway for off-chain commands.</li> </ul>"},{"location":"architecture/#vaultfactory","title":"<code>VaultFactory</code>","text":"<ul> <li>Deployment: A utility contract responsible for deploying new <code>YVault</code> instances.</li> <li>Initialization: During deployment, the <code>VaultFactory</code> sets the initial active strategy for the new vault and assigns the designated <code>AutomationOwner</code> address.</li> </ul>"},{"location":"architecture/#off-chain-components","title":"\ud83d\udcbb Off-Chain Components","text":"<p>These external components provide the intelligence and automation necessary for dynamic vault management:</p>"},{"location":"architecture/#ai-agent-built-with-elizaos","title":"AI Agent (Built with ElizaOS)","text":"<ul> <li>Data Aggregation: Gathers comprehensive DeFi market data from various sources including Aave, Curve, CoinGecko, and others.</li> <li>Market Analysis: Classifies market trends (e.g., bullish, bearish, volatile, flat) and intelligently selects the most suitable liquidity pool or protocol for each specific strategy type (e.g., low risk, high risk).</li> <li>Decision Storage: Stores its calculated optimal strategy decisions within the ElizaOS Key-Value (KV) store, making them accessible to other components.</li> </ul>"},{"location":"architecture/#chainlink-automation","title":"Chainlink Automation","text":"<ul> <li>Trigger Mechanism: Regularly monitors the ElizaOS KV store for updated market signals and strategy decisions.</li> <li>On-Chain Execution: Upon detecting a new signal or on a predefined schedule, it securely calls the <code>AutomationOwner.updateVaultStrategy(vault, strategy)</code> function on-chain, initiating the vault's strategy change.</li> </ul>"},{"location":"architecture/#benefits-of-automationowner","title":"\u2705 Benefits of <code>AutomationOwner</code>","text":"<p>The inclusion of the <code>AutomationOwner</code> contract provides several architectural advantages:</p> <ul> <li>Clean Separation of Authority: Clearly delineates responsibilities, ensuring that direct control over <code>YVault</code>'s critical functions is abstracted away from external automation.</li> <li>Enhanced Security: Provides a safer mechanism than granting Chainlink Automation direct access to sensitive vault functions. It acts as a single, auditable choke point for external commands.</li> <li>Centralized Override/Fallback: Offers a potential point for centralized intervention or a fallback mechanism if automated processes need to be paused or manually adjusted in emergencies.</li> </ul> <p>For an in-depth look at the AI agent's functionality and decision-making process, please refer to the ai-agent.md documentation. To explore the smart contract functions and their usage, consult the api.md guide.</p>"},{"location":"developer-docs/","title":"Developer Notes","text":"<p>These notes help contributors understand, test, and extend the protocol.</p>"},{"location":"developer-docs/#local-development","title":"Local Development","text":"<ul> <li>Clone repo and run:</li> </ul> <pre><code>forge install\nforge test\npnpm install\npnpm dev\n</code></pre> <ul> <li> <p>You need Sepolia ETH + USDC to test vault deposits.</p> </li> <li> <p>Use <code>MockAavePool</code>, <code>MockMorphoMarket</code> for strategy testing.</p> </li> </ul>"},{"location":"developer-docs/#key-contracts","title":"Key Contracts","text":""},{"location":"developer-docs/#vaultfactory","title":"VaultFactory","text":"<ul> <li>Deploys <code>YVault</code> with proper strategy + AutomationOwner.</li> <li>Tracks vaults by risk level.</li> </ul>"},{"location":"developer-docs/#yvault","title":"YVault","text":"<ul> <li>Implements ERC4626.</li> <li>Delegates execution to strategy via <code>allocateFunds()</code>.</li> </ul>"},{"location":"developer-docs/#strategies","title":"Strategies","text":"<ul> <li>Each must implement <code>IStrategy</code> interface.</li> <li>Mock contracts available for testnet.</li> </ul>"},{"location":"developer-docs/#chainlink-automation-integration","title":"Chainlink Automation Integration","text":"<ul> <li><code>AutomationOwner</code> contract owns vaults.</li> <li>Only Chainlink Keeper can call <code>updateVaultStrategy()</code>.</li> <li>Set keeper via <code>setKeeper(address)</code>.</li> </ul>"},{"location":"developer-docs/#elizaos-ai-agent","title":"ElizaOS AI Agent","text":"<ul> <li>Located in <code>eliza-ai-agnet/src/agent.ts</code>.</li> <li>Uses external APIs (CoinGecko, Aave, Morpho).</li> <li>Triggers strategy updates via KV writes.</li> </ul>"},{"location":"developer-docs/#testing-strategy-logic","title":"Testing Strategy Logic","text":"<p>You can simulate allocation by:</p> <ol> <li>Deploying vault and strategy contracts.</li> <li>Depositing USDC.</li> <li>Manually calling <code>setStrategy()</code> and <code>allocateFunds()</code>.</li> <li>Verifying fund movement in strategy contract.</li> </ol>"},{"location":"developer-docs/#extending-the-system","title":"Extending the System","text":"<ul> <li>Add new strategy by creating a contract that implements <code>IStrategy</code>.</li> <li>Register new strategy in your AI agent logic.</li> <li>Update frontend to reflect additional vaults or options.</li> </ul> <p>See architecture.md and api.md for detailed references.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how users interact with the AI-powered vaults.</p>"},{"location":"usage/#1-connect-wallet","title":"1. Connect Wallet","text":"<ul> <li>Use MetaMask or WalletConnect.</li> <li>Make sure you're on Sepolia testnet.</li> </ul>"},{"location":"usage/#2-choose-vault","title":"2. Choose Vault","text":"<ul> <li>Go to the <code>AI Vault</code> tab.</li> <li> <p>Select between:</p> </li> <li> <p>Low-Risk Vault: allocates to Aave.</p> </li> <li>High-Risk Vault: allocates to Morpho/Curve.</li> </ul>"},{"location":"usage/#3-deposit-usdc","title":"3. Deposit USDC","text":"<ul> <li>Input amount and confirm transaction.</li> <li>Vault receives your USDC and issues ERC4626 shares.</li> </ul>"},{"location":"usage/#4-wait-for-allocation","title":"4. Wait for Allocation","text":"<ul> <li>Funds are held until the AI agent picks a strategy.</li> <li>Chainlink Automation triggers <code>allocateFunds()</code>.</li> <li>Your deposit is deployed into the selected strategy.</li> </ul>"},{"location":"usage/#5-view-your-balance","title":"5. View Your Balance","text":"<ul> <li>You\u2019ll see share value increase as strategies earn yield.</li> <li>Withdraw any time to redeem USDC.</li> </ul>"},{"location":"usage/#6-withdraw","title":"6. Withdraw","text":"<ul> <li>Navigate to Withdraw tab.</li> <li>Input amount or select \u201cMax.\u201d</li> <li>Vault burns shares and returns USDC.</li> </ul>"},{"location":"usage/#notes","title":"Notes","text":"<ul> <li>You can deposit multiple times.</li> <li>Withdrawals only return assets available from current strategy.</li> <li>Only vault admins can pause deposits/withdrawals.</li> </ul> <p>For strategy logic, see ai-agent.md. For contract-level calls, see api.md.</p>"}]}
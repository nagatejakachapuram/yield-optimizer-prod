{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yield Optimizer","text":"<p>Welcome to the Yield Optimizer documentation. This project enables users to earn yield on stablecoins via AI-powered strategy selection and vault-based fund allocation.</p> <p>Built using modular smart contracts and AI analysis, this system combines:</p> <ul> <li>On-chain USDC vaults</li> <li>User-selected risk levels</li> <li>AI agent monitoring market conditions</li> <li>Chainlink Automation for execution</li> </ul>"},{"location":"ai-agent/","title":"AI Agent","text":"<p>The off-chain AI agent is built using ElizaOS. It analyzes market data and writes strategy decisions to ElizaOS KV storage, which Chainlink Automation later reads.</p>"},{"location":"ai-agent/#responsibilities","title":"Responsibilities","text":"<ul> <li>Monitor market conditions (price trend, yield changes).</li> <li>Choose optimal pool (per risk profile).</li> <li>Store selected strategy per vault type in ElizaOS KV.</li> </ul>"},{"location":"ai-agent/#workflow","title":"Workflow","text":"<ol> <li>User deposits USDC and selects a risk preference.</li> <li>Vault logs deposit, but does not allocate funds yet.</li> <li>AI agent periodically runs, checks DeFi data (Aave, Morpho, Curve, Lookonchain, CoinGecko).</li> <li>Based on market classification (e.g., bullish, sideways), AI picks the best <code>IStrategy</code> per risk profile.</li> <li>Writes the decision to KV:</li> </ol> <p><pre><code>{\n  \"low\": \"0xLowRiskAaveStrategy\",\n  \"high\": \"0xHighRiskMorphoStrategy\"\n}\n</code></pre> 6. Chainlink Automation triggers and reads this KV. 7. Calls <code>AutomationOwner.updateVaultStrategy()</code>. 8. <code>YVault.allocateFunds()</code> then sends funds to the new strategy.</p>"},{"location":"ai-agent/#example-strategy-logic","title":"Example Strategy Logic","text":"<ul> <li>If stable yields &gt; 4% and market is flat \u2192 use Aave.</li> <li>If ETH market up 7d/25d and Curve APY is high \u2192 use Curve.</li> </ul>"},{"location":"ai-agent/#extensibility","title":"Extensibility","text":"<p>You can extend the AI agent to:</p> <ul> <li>Add more sources (e.g., Dune, Pendle).</li> <li>Customize thresholds.</li> <li>Combine user sentiment data.</li> </ul> <p>See developer.md for how to integrate more protocols or replace ElizaOS.</p>"},{"location":"api/","title":"Vault API","text":"<p>This section documents the core smart contract interfaces: <code>YVault</code>, <code>IStrategy</code>, and <code>AutomationOwner</code>.</p>"},{"location":"api/#yvault-erc4626-style","title":"YVault (ERC4626-style)","text":""},{"location":"api/#functions","title":"Functions","text":""},{"location":"api/#deposituint256-assets-address-receiver","title":"<code>deposit(uint256 assets, address receiver)</code>","text":"<ul> <li>Deposits USDC into the vault.</li> <li>Mints and transfers shares to <code>receiver</code>.</li> </ul>"},{"location":"api/#withdrawuint256-assets-address-receiver-address-owner","title":"<code>withdraw(uint256 assets, address receiver, address owner)</code>","text":"<ul> <li>Burns shares to redeem <code>assets</code> amount.</li> <li>Transfers USDC to <code>receiver</code>.</li> </ul>"},{"location":"api/#setstrategyaddress-newstrategy","title":"<code>setStrategy(address newStrategy)</code>","text":"<ul> <li>Sets the active strategy (only callable by <code>AutomationOwner</code>).</li> </ul>"},{"location":"api/#allocatefundsaddress-user-uint256-amount","title":"<code>allocateFunds(address user, uint256 amount)</code>","text":"<ul> <li>Calls <code>strategy.execute(user, amount)</code> to allocate deposited funds.</li> <li>Callable only by <code>AutomationOwner</code>.</li> </ul>"},{"location":"api/#pricepershare","title":"<code>pricePerShare()</code>","text":"<ul> <li>Returns share-to-asset exchange rate.</li> </ul>"},{"location":"api/#istrategy-interface","title":"IStrategy Interface","text":"<pre><code>interface IStrategy {\n    function execute(address user, uint256 amount) external;\n}\n</code></pre> <ul> <li>The strategy decides how to deploy funds (e.g., lend to Aave, deposit in Curve).</li> </ul>"},{"location":"api/#automationowner","title":"AutomationOwner","text":""},{"location":"api/#purpose","title":"Purpose","text":"<ul> <li>Delegated authority for Chainlink Automation.</li> <li>Allows <code>updateVaultStrategy()</code> to safely manage <code>YVault</code> logic.</li> </ul>"},{"location":"api/#functions_1","title":"Functions","text":""},{"location":"api/#updatevaultstrategyaddress-vault-address-newstrategy","title":"<code>updateVaultStrategy(address vault, address newStrategy)</code>","text":"<ul> <li>Callable only by Chainlink Automation Keeper.</li> <li>Internally calls <code>vault.setStrategy(newStrategy)</code>.</li> </ul>"},{"location":"api/#setkeeperaddress-newkeeper","title":"<code>setKeeper(address newKeeper)</code>","text":"<ul> <li>Owner-only function to update authorized Chainlink keeper.</li> </ul>"},{"location":"api/#access-control","title":"Access Control","text":"<ul> <li>Vault owner: initially deployer, may be transferred.</li> <li>AutomationOwner: sole authority to manage <code>YVault</code> execution.</li> <li>Strategy contracts have no special access rights; they are passive targets.</li> </ul> <p>See architecture.md for how these interact, and developer.md to customize or extend functionality.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>This protocol consists of off-chain and on-chain components, connected through Chainlink Automation and a permissioned controller contract (<code>AutomationOwner</code>).</p>"},{"location":"architecture/#diagram-overview","title":"Diagram Overview","text":"<p>```mermaid flowchart TD     U[\"User\"]     A[\"Frontend UI(Assets / AI Vault Tabs)\"]     B[\"LowRiskVault(USDC Vault)\"]     C[\"HighRiskVault(USDC Vault)\"]     D[\"LowRiskAaveStrategy\"]     E[\"HighRiskMorphoStrategy\"]     F[\"MockAavePool\"]     G[\"MockMorphoPool\"]     H[\"AutomationOwner\"]     I[\"Chainlink Automation(allocateFunds)\"]     J[\"AI Agent(7d/25d Trend Analyzer)\"]     K[\"ElizaOS KV(Market Signal Store)\"]     L[\"CoinGecko &amp; DefiLlama(Market Data)\"]</p> <pre><code>%% Connections\nU --&gt; A\nA --&gt; B\nA --&gt; C\nB --&gt; D\nC --&gt; E\nD --&gt; F\nE --&gt; G\nH --&gt; B\nH --&gt; C\nI --&gt; H\nJ --&gt; I\nJ --&gt; K\nJ --&gt; L\n</code></pre>"},{"location":"architecture/#key-contracts","title":"Key Contracts","text":""},{"location":"architecture/#yvault","title":"YVault","text":"<ul> <li>ERC4626-compliant vault for USDC.</li> <li>Accepts deposits, issues shares, manages strategy allocation.</li> </ul>"},{"location":"architecture/#strategy-contracts","title":"Strategy Contracts","text":"<ul> <li>Each strategy implements <code>IStrategy</code> interface with <code>execute(address user, uint256 amount)</code>.</li> <li>LowRiskAaveStrategy: lends to Aave stable markets.</li> <li>HighRiskMorphoStrategy: allocates to Morpho Blue / Curve-like vaults.</li> </ul>"},{"location":"architecture/#automationowner","title":"AutomationOwner","text":"<ul> <li>Owns and manages vault <code>setStrategy()</code> calls.</li> <li>Only address authorized for Chainlink Automation.</li> </ul>"},{"location":"architecture/#vaultfactory","title":"VaultFactory","text":"<ul> <li>Deploys vaults per risk level (e.g. \"low\", \"high\").</li> <li>Sets initial strategy and AutomationOwner.</li> </ul>"},{"location":"architecture/#off-chain-components","title":"Off-Chain Components","text":""},{"location":"architecture/#ai-agent-elizaos","title":"AI Agent (ElizaOS)","text":"<ul> <li>Gathers DeFi data from Aave, Curve, CoinGecko, etc.</li> <li>Classifies market trend and selects pool per strategy type.</li> <li>Stores decision in ElizaOS KV.</li> </ul>"},{"location":"architecture/#chainlink-automation","title":"Chainlink Automation","text":"<ul> <li>Calls <code>AutomationOwner.updateVaultStrategy(vault, strategy)</code></li> <li>Executes based on scheduled or AI-prompted triggers.</li> </ul>"},{"location":"architecture/#benefits-of-automationowner","title":"Benefits of <code>AutomationOwner</code>","text":"<ul> <li>Clean separation of on-chain authority.</li> <li>Safer than giving Chainlink access directly to vault.</li> <li>Enables centralized override or fallback if needed.</li> </ul> <p>See ai-agent.md for more on how the AI works, or api.md for smart contract functions.</p>"},{"location":"developer/","title":"Developer Notes","text":"<p>These notes help contributors understand, test, and extend the protocol.</p>"},{"location":"developer/#local-development","title":"Local Development","text":"<ul> <li>Clone repo and run:</li> </ul> <pre><code>forge install\nforge test\npnpm install\npnpm dev\n</code></pre> <ul> <li> <p>You need Sepolia ETH + USDC to test vault deposits.</p> </li> <li> <p>Use <code>MockAavePool</code>, <code>MockMorphoMarket</code> for strategy testing.</p> </li> </ul>"},{"location":"developer/#key-contracts","title":"Key Contracts","text":""},{"location":"developer/#vaultfactory","title":"VaultFactory","text":"<ul> <li>Deploys <code>YVault</code> with proper strategy + AutomationOwner.</li> <li>Tracks vaults by risk level.</li> </ul>"},{"location":"developer/#yvault","title":"YVault","text":"<ul> <li>Implements ERC4626.</li> <li>Delegates execution to strategy via <code>allocateFunds()</code>.</li> </ul>"},{"location":"developer/#strategies","title":"Strategies","text":"<ul> <li>Each must implement <code>IStrategy</code> interface.</li> <li>Mock contracts available for testnet.</li> </ul>"},{"location":"developer/#chainlink-automation-integration","title":"Chainlink Automation Integration","text":"<ul> <li><code>AutomationOwner</code> contract owns vaults.</li> <li>Only Chainlink Keeper can call <code>updateVaultStrategy()</code>.</li> <li>Set keeper via <code>setKeeper(address)</code>.</li> </ul>"},{"location":"developer/#elizaos-ai-agent","title":"ElizaOS AI Agent","text":"<ul> <li>Located in <code>eliza-ai-agnet/src/agent.ts</code>.</li> <li>Uses external APIs (CoinGecko, Aave, Morpho).</li> <li>Triggers strategy updates via KV writes.</li> </ul>"},{"location":"developer/#testing-strategy-logic","title":"Testing Strategy Logic","text":"<p>You can simulate allocation by:</p> <ol> <li>Deploying vault and strategy contracts.</li> <li>Depositing USDC.</li> <li>Manually calling <code>setStrategy()</code> and <code>allocateFunds()</code>.</li> <li>Verifying fund movement in strategy contract.</li> </ol>"},{"location":"developer/#extending-the-system","title":"Extending the System","text":"<ul> <li>Add new strategy by creating a contract that implements <code>IStrategy</code>.</li> <li>Register new strategy in your AI agent logic.</li> <li>Update frontend to reflect additional vaults or options.</li> </ul> <p>See architecture.md and api.md for detailed references.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how users interact with the AI-powered vaults.</p>"},{"location":"usage/#1-connect-wallet","title":"1. Connect Wallet","text":"<ul> <li>Use MetaMask or WalletConnect.</li> <li>Make sure you're on Sepolia testnet.</li> </ul>"},{"location":"usage/#2-choose-vault","title":"2. Choose Vault","text":"<ul> <li>Go to the <code>AI Vault</code> tab.</li> <li> <p>Select between:</p> </li> <li> <p>Low-Risk Vault: allocates to Aave.</p> </li> <li>High-Risk Vault: allocates to Morpho/Curve.</li> </ul>"},{"location":"usage/#3-deposit-usdc","title":"3. Deposit USDC","text":"<ul> <li>Input amount and confirm transaction.</li> <li>Vault receives your USDC and issues ERC4626 shares.</li> </ul>"},{"location":"usage/#4-wait-for-allocation","title":"4. Wait for Allocation","text":"<ul> <li>Funds are held until the AI agent picks a strategy.</li> <li>Chainlink Automation triggers <code>allocateFunds()</code>.</li> <li>Your deposit is deployed into the selected strategy.</li> </ul>"},{"location":"usage/#5-view-your-balance","title":"5. View Your Balance","text":"<ul> <li>You\u2019ll see share value increase as strategies earn yield.</li> <li>Withdraw any time to redeem USDC.</li> </ul>"},{"location":"usage/#6-withdraw","title":"6. Withdraw","text":"<ul> <li>Navigate to Withdraw tab.</li> <li>Input amount or select \u201cMax.\u201d</li> <li>Vault burns shares and returns USDC.</li> </ul>"},{"location":"usage/#notes","title":"Notes","text":"<ul> <li>You can deposit multiple times.</li> <li>Withdrawals only return assets available from current strategy.</li> <li>Only vault admins can pause deposits/withdrawals.</li> </ul> <p>For strategy logic, see ai-agent.md. For contract-level calls, see api.md.</p>"}]}
{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yield Optimizer Protocol","text":"<p>Welcome to the documentation for the AI-powered Yield Optimizer Protocol. This protocol intelligently allocates user capital across DeFi strategies based on risk preference and market conditions using an off-chain AI agent and Chainlink Automation.</p>"},{"location":"#overview","title":"\ud83d\ude80 Overview","text":"<p>Our protocol features:</p> <ul> <li>\ud83e\udde0 AI Agent: An off-chain agent built using ElizaOS, analyzing DeFi market data (CoinGecko, DeFiLlama, etc.) to detect market trends and choose optimal strategies.</li> <li>\ud83e\uddfe Vaults (YVault): ERC4626-style Yearn V2 vaults that accept deposits, track shares, and allocate capital to active strategies.</li> <li>\u2699\ufe0f Chainlink Automation: Automates on-chain execution of the AI agent's strategy recommendations.</li> <li>\ud83d\udd00 Risk-Based Strategies: Supports Low Risk (e.g., Aave) and High Risk (e.g., Morpho/Curve) strategies based on user selection.</li> </ul>"},{"location":"#components","title":"\ud83e\uddf1 Components","text":""},{"location":"#1-yvault","title":"1. YVault","text":"<ul> <li>Accepts USDC deposits.</li> <li>Tracks shares using <code>pricePerShare</code>.</li> <li>Allocates capital to strategies via <code>setStrategy()</code> and <code>report()</code>.</li> </ul>"},{"location":"#2-strategies","title":"2. Strategies","text":"<ul> <li>Each vault supports one strategy at a time.</li> <li>Strategies implement a common <code>IStrategy</code> interface.</li> <li>Examples:</li> <li><code>LowRiskAaveStrategy</code>: Supplies funds to Aave.</li> <li><code>HighRiskMorphoStrategy</code>: Allocates to Morpho Blue/Curve pools.</li> </ul>"},{"location":"#3-ai-agent","title":"3. AI Agent","text":"<ul> <li>Runs off-chain using ElizaOS plugin.</li> <li>Periodically fetches market data.</li> <li>Decides the best pool per risk category.</li> <li>Stores result in KV (ElizaOS) for on-chain access.</li> </ul>"},{"location":"#4-chainlink-automation","title":"4. Chainlink Automation","text":"<ul> <li>Triggers <code>allocateFunds()</code> based on strategy output.</li> <li>Can be scheduled or triggered on deposit events.</li> <li>Uses an <code>AutomationOwner</code> contract to act on behalf of the vault.</li> </ul>"},{"location":"#testing","title":"\ud83e\uddea Testing","text":"<p>We use mocked contracts to simulate:</p> <ul> <li>\ud83d\udd04 USDC &amp; USDY tokens</li> <li>\ud83e\uddea MockAavePool and MockMorphoPool</li> <li>\ud83e\udde0 Mock AI outputs</li> <li>\u2705 Chainlink upkeep triggers</li> </ul>"},{"location":"#github","title":"\ud83c\udf10 GitHub","text":"<p>View the source code on GitHub</p> <p>Last updated: June 2025</p>"},{"location":"Roadmap/","title":"\ud83d\udd2e Future Scope","text":"<p>We\u2019ve mock-tested major integrations to ensure robustness before deploying to mainnet. Here's what\u2019s coming next:</p>"},{"location":"Roadmap/#mock-tested-mainnet-ready","title":"\ud83e\uddea Mock Tested &amp; Mainnet Ready","text":"<p>We've successfully simulated and validated critical components in a controlled environment:</p>"},{"location":"Roadmap/#usdy-mock-integration","title":"\u2705 USDY Mock Integration","text":"<ul> <li>Mock Ondo Finance USDY token used for simulation</li> <li>Yield algorithms and risk logic tested</li> </ul>"},{"location":"Roadmap/#proof-of-reserves-por","title":"\u2705 Proof of Reserves (PoR)","text":"<ul> <li>Mock Chainlink PoR simulated for asset verification</li> <li>Transparency and compliance logic validated</li> </ul>"},{"location":"Roadmap/#yield-index-data","title":"\u2705 Yield Index Data","text":"<ul> <li>Mock yield aggregation and index tracking implemented</li> <li>Risk-adjusted and historical yield metrics tested</li> </ul>"},{"location":"Roadmap/#roadmap-to-mainnet","title":"\ud83d\udee3\ufe0f Roadmap to Mainnet","text":""},{"location":"Roadmap/#current-june-2025","title":"\u2705 Current (June 2025)","text":"<ul> <li>Finalize mock testing of all strategies and vaults</li> <li>Validate Chainlink Automation flow with real Sepolia USDC</li> <li>Publish public docs and developer onboarding</li> </ul>"},{"location":"Roadmap/#q3-2025","title":"\ud83d\udd1c Q3 2025","text":"Feature Description USDY Integration Connect to Ondo Finance\u2019s USDY token on mainnet Chainlink Proof of Reserves Integrate real-time PoR data feeds Production Yield Index Use live Chainlink data feeds for on-chain yield indexing Vault Tokenization ERC4626-compliant yield-bearing vault tokens Frontend Strategy Visualizer View historic and projected APY per strategy Multi-Chain Deployment Expand to Base or Arbitrum"},{"location":"Roadmap/#longer-term-goals","title":"\ud83c\udf10 Longer-Term Goals","text":"<ul> <li>Automated Strategy Rebalancing: Auto-switch strategies based on AI signals and APY volatility.</li> <li>Multi-Asset Vaults: Support ETH, wBTC, or LSDs like stETH.</li> <li>Social Yield Pools: Allow users to form strategy groups and allocate based on sentiment signals.</li> <li>On-chain Governance: Let the community vote on strategy inclusion and AI tuning parameters.</li> </ul>"},{"location":"Roadmap/#vision","title":"\ud83e\udde0 Vision","text":"<p>A fully autonomous, AI-powered DeFi yield router that:</p> <ul> <li>Reads the market</li> <li>Picks the best pools</li> <li>Allocates user funds</li> <li>Reports transparent performance</li> </ul> <p>With robust testing behind us, the protocol is ready for secure, phased mainnet rollout.</p>"},{"location":"ai-agent/","title":"\ud83e\udd16 AI Agent (YieldBot)","text":"<p>The AI agent, called YieldBot, is a plugin built using ElizaOS that recommends optimal DeFi strategies based on market conditions and user risk preference. It runs off-chain and powers the strategy selection logic for the vaults.</p>"},{"location":"ai-agent/#core-functionality","title":"\ud83e\udde0 Core Functionality","text":"<ol> <li> <p>Market Analysis</p> </li> <li> <p>Uses CoinGecko to fetch 7-day and 25-day price trends.</p> </li> <li> <p>Detects whether the market is trending bullish or bearish.</p> </li> <li> <p>Yield Pool Discovery</p> </li> <li> <p>Fetches current APYs from DeFiLlama:</p> <ul> <li>Aave (Low Risk)</li> <li>Morpho Blue (High Risk)</li> </ul> </li> <li> <p>Can be extended to Curve, Pendle, Compound, etc.</p> </li> <li> <p>Strategy Recommendation</p> </li> <li> <p>Based on market trend and user-selected risk (low/high),</p> </li> <li> <p>Chooses the best performing pool in that category.</p> </li> <li> <p>KV Storage</p> </li> <li> <p>Saves the selected strategy in ElizaOS KV Store:</p> <ul> <li>Key: <code>\"strategy:low\"</code> or <code>\"strategy:high\"</code></li> <li>Value: JSON with pool details and APY</li> </ul> </li> <li> <p>Automation</p> </li> <li>Output is used by Chainlink Automation to call <code>allocateFunds()</code> on-chain.</li> </ol>"},{"location":"ai-agent/#sample-kv-output","title":"\ud83e\uddea Sample KV Output","text":"<pre><code>{\n  \"strategy\": \"0x9d0C7e2fFbC982F7FAb31E9b79a9aEecf87c0A81\",\n  \"apy\": \"4.92%\",\n  \"risk\": \"low\",\n  \"platform\": \"aave\"\n}\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":"<p>Here\u2019s the updated <code>architecture.md</code> content with the image embedded properly using Markdown syntax. You can place this in your <code>docs-site/docs/architecture.md</code>:</p>"},{"location":"architecture/#protocol-architecture","title":"\ud83c\udfd7\ufe0f Protocol Architecture","text":"<p>This yield optimization protocol combines smart contract-based vaults with an AI agent and Chainlink Automation to intelligently allocate funds based on market conditions and user risk preference.</p>"},{"location":"architecture/#system-diagram","title":"\ud83d\uddbc\ufe0f System Diagram","text":""},{"location":"architecture/#components","title":"\ud83e\udde9 Components","text":""},{"location":"architecture/#user","title":"\ud83d\udc64 User","text":"<ul> <li>Interacts via a simple Frontend UI.</li> <li>Can view balances and deposit into AI-driven vaults.</li> </ul>"},{"location":"architecture/#frontend-ui","title":"\ud83d\udcbb Frontend UI","text":"<ul> <li> <p>Contains two main tabs:</p> </li> <li> <p><code>Assets</code> \u2013 view deposits, APY, etc.</p> </li> <li><code>AI Vault</code> \u2013 deposit into Low or High risk vaults.</li> </ul>"},{"location":"architecture/#ai-agent-elizaos-plugin","title":"\ud83e\udd16 AI Agent (ElizaOS Plugin)","text":"<ul> <li>Uses 7-day and 25-day market trend analysis.</li> <li> <p>Fetches DeFi data from:</p> </li> <li> <p>CoinGecko (price history)</p> </li> <li> <p>DeFiLlama (APYs, TVLs)</p> </li> <li> <p>Stores chosen strategy in ElizaOS KV Store.</p> </li> </ul>"},{"location":"architecture/#chainlink-automation","title":"\u26d3\ufe0f Chainlink Automation","text":"<ul> <li>Periodically or immediately calls <code>allocateFunds()</code> on the vaults.</li> <li>Triggers allocation only if AI agent has posted a valid strategy in ElizaOS KV.</li> </ul>"},{"location":"architecture/#automationowner-contract","title":"\ud83d\udd10 AutomationOwner Contract","text":"<ul> <li>Trusted controller that mediates access from Chainlink Automation to <code>YVault</code>.</li> <li>Ensures only secure, scheduled execution of allocation logic.</li> </ul>"},{"location":"architecture/#vaults","title":"\ud83c\udfe6 Vaults","text":"<p>Two Yearn V2-style vaults:</p> <ul> <li><code>LowRiskVault</code> \u2014 interacts with Aave-based strategy.</li> <li><code>HighRiskVault</code> \u2014 interacts with Morpho Blue strategy.</li> </ul>"},{"location":"architecture/#strategies","title":"\ud83d\udcca Strategies","text":"<ul> <li><code>LowRiskAaveStrategy</code> \u2192 invests in a mocked Aave USDC pool.</li> <li><code>HighRiskMorphoStrategy</code> \u2192 invests in a mocked Morpho Blue pool.</li> <li>Strategies are modular and upgradable by governance.</li> </ul>"},{"location":"architecture/#fund-flow-summary","title":"\ud83d\udd01 Fund Flow Summary","text":"<ol> <li>User deposits USDC into either vault.</li> <li>AI Agent selects optimal pool based on market signal.</li> <li>Result is stored in ElizaOS KV (off-chain).</li> <li>Chainlink Automation triggers fund allocation via <code>AutomationOwner</code>.</li> <li>Funds are routed from the vault into the selected strategy.</li> <li>Strategy contract executes on the corresponding protocol (mocked for testing).</li> </ol> <p>Let me know if you'd like a sidebar entry for this or if you're using <code>mkdocs.yml</code>\u2014I can help configure that too.</p>"},{"location":"automation/","title":"\u2699\ufe0f Automation &amp; AI Workflow","text":""},{"location":"automation/#ai-agent-elizaos","title":"\ud83e\udd16 AI Agent (ElizaOS)","text":"<ul> <li>Triggered periodically or on-demand.</li> <li>Collects:   7-day / 25-day price data from CoinGecko</li> <li>Pool APYs from DeFiLlama</li> <li>Picks best pool per risk level.</li> <li>Stores result in ElizaOS KV.</li> </ul>"},{"location":"automation/#sample-kv-output","title":"\ud83e\uddea Sample KV Output","text":"<pre><code>{\n  \"strategy\": \"0x000000000000000000000000000000000000dead\",\n  \"apy\": \"4.92%\",\n  \"risk\": \"low\",\n  \"platform\": \"aave\"\n}\n</code></pre>"},{"location":"developer-docs/","title":"\ud83d\udee0\ufe0f Developer Docs","text":"<p>For contributors and smart contract developers building on top of the protocol.</p>"},{"location":"developer-docs/#tech-stack","title":"\ud83d\udce6 Tech Stack","text":"<ul> <li>Solidity \u2013 Core contracts (vaults, strategies, automation owner)</li> <li>TypeScript \u2013 AI agent (<code>agent/</code>) and frontend app (<code>frontend/</code>)</li> <li>Chainlink Automation \u2013 For scheduled and reactive execution</li> <li>ElizaOS \u2013 AI agent plugin framework + key-value (KV) storage</li> <li>Foundry \u2013 Smart contract development &amp; testing</li> <li>MkDocs \u2013 Documentation site</li> </ul>"},{"location":"developer-docs/#developer-tooling","title":"\ud83e\uddf0 Developer Tooling","text":"<p>Here\u2019s what you need to install to contribute or test the system locally:</p>"},{"location":"developer-docs/#smart-contract-dev-tools","title":"\ud83d\udd17 Smart Contract Dev Tools","text":"<ul> <li>Foundry (Forge) \u2013 For testing, deployment, and debugging</li> </ul> <pre><code>curl -L https://foundry.paradigm.xyz | bash\nfoundryup\n</code></pre> <ul> <li> <p>Solidity (&gt;=0.8.0)</p> </li> <li> <p>Node.js (&gt;=18)</p> </li> <li> <p>Yarn (recommended over npm)</p> </li> </ul> <pre><code>npm install -g yarn\n</code></pre>"},{"location":"developer-docs/#ai-agent-tools","title":"\ud83e\udd16 AI Agent Tools","text":"<ul> <li>ElizaOS CLI \u2013 Plugin development environment</li> </ul> <pre><code>npm install -g eliza\n</code></pre> <ul> <li> <p><code>.env</code> file with API keys:</p> </li> <li> <p><code>COINGECKO_API_KEY</code></p> </li> <li><code>DEFI_LLAMA_API_KEY</code> (optional)</li> <li><code>KV_AUTH_TOKEN</code> (from ElizaOS dashboard)</li> </ul>"},{"location":"developer-docs/#frontend-dev","title":"\ud83c\udf10 Frontend Dev","text":"<ul> <li>React + Vite + Tailwind (inside <code>frontend/</code>)</li> </ul> <pre><code>cd frontend\nyarn install\nyarn dev\n</code></pre>"},{"location":"developer-docs/#documentation-dev","title":"\ud83d\udcd8 Documentation Dev","text":"<ul> <li>MkDocs + Material theme</li> </ul> <pre><code>pip install mkdocs-material\nmkdocs serve\n</code></pre>"},{"location":"developer-docs/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 contracts/             # Vaults, strategies (Solidity)\n\u251c\u2500\u2500 agent/                 # ElizaOS plugin (TypeScript)\n\u251c\u2500\u2500 frontend/              # Web UI (Vite + Tailwind)\n\u251c\u2500\u2500 automation-owner/      # Chainlink Automation owner\n\u251c\u2500\u2500 docs-site/             # This MkDocs documentation site\n</code></pre>"},{"location":"developer-docs/#local-testing","title":"\ud83e\uddea Local Testing","text":""},{"location":"developer-docs/#run-agent","title":"Run Agent:","text":"<pre><code>cd agent\nyarn start\n</code></pre>"},{"location":"developer-docs/#run-contracts","title":"Run Contracts:","text":"<pre><code>cd contracts\nforge build\nforge test\n</code></pre>"},{"location":"developer-docs/#run-docs","title":"Run Docs:","text":"<pre><code>cd docs-site\nmkdocs serve\n</code></pre>"},{"location":"developer-docs/#secrets-env-setup","title":"\ud83d\udd10 Secrets &amp; Env Setup","text":"<ul> <li><code>.env</code> required in <code>agent/</code>, <code>frontend/</code>, and <code>contracts/</code> folders.</li> <li>Do not commit <code>.env</code> to git.</li> </ul>"},{"location":"main-contracts/","title":"\ud83e\uddfe Main Contracts","text":"<p>Overview of smart contracts used in the protocol.</p>"},{"location":"main-contracts/#yvault","title":"\ud83c\udfe6 YVault","text":"<p>A Yearn V2-style vault with added support for AI allocation.</p>"},{"location":"main-contracts/#key-functions","title":"Key Functions:","text":"<ul> <li><code>deposit(uint256)</code>: Accepts USDC and mints shares.</li> <li><code>withdraw(uint256)</code>: Burns shares, returns USDC.</li> <li><code>setStrategy(address)</code>: Admin-only.</li> <li><code>allocateFunds(uint256, address)</code>: Chainlink-only function to allocate funds.</li> </ul>"},{"location":"main-contracts/#roles","title":"Roles:","text":"<ul> <li><code>admin</code>: Sets strategies, recovers tokens.</li> <li><code>chainlink_admin</code>: Only AutomationOwner can call <code>allocateFunds()</code>.</li> </ul>"},{"location":"main-contracts/#automationowner","title":"\ud83d\udd10 AutomationOwner","text":"<p>Middleware between Chainlink Automation and vault.</p> <ul> <li>Ensures only verified keepers can trigger fund allocation.</li> <li>Can be extended to throttle or rate-limit allocations.</li> </ul>"},{"location":"main-contracts/#strategies","title":"\ud83d\udcc9 Strategies","text":"<p>Each vault has one active strategy.</p> <ul> <li><code>LowRiskAaveStrategy</code></li> <li><code>HighRiskMorphoStrategy</code></li> </ul> <p>Each strategy implements:</p> <pre><code>interface IStrategy {\n  function execute(uint256 amount) external;\n}\n</code></pre>"},{"location":"usage/","title":"\ud83d\ude80 How to Use the Protocol","text":"<p>This guide walks through how users interact with the yield optimization protocol.</p>"},{"location":"usage/#step-1-connect-wallet","title":"\ud83d\udd13 Step 1: Connect Wallet","text":"<ul> <li>Visit the frontend.</li> <li>Connect your wallet (e.g., MetaMask, WalletConnect).</li> </ul>"},{"location":"usage/#step-2-deposit-usdc","title":"\ud83d\udcb0 Step 2: Deposit USDC","text":"<ul> <li>Go to the <code>AI Vault</code> tab.</li> <li>Choose:</li> <li>Low Risk \u2192 deposits go to Aave strategy.</li> <li>High Risk \u2192 deposits go to Morpho strategy.</li> <li>Enter amount and confirm the transaction.</li> </ul>"},{"location":"usage/#step-3-ai-driven-allocation","title":"\ud83d\udd01 Step 3: AI-Driven Allocation","text":"<ul> <li>Behind the scenes:</li> <li>An AI agent picks a pool based on market trends.</li> <li>Chainlink Automation calls <code>allocateFunds()</code> to move funds to the strategy.</li> </ul>"},{"location":"usage/#step-4-withdraw-anytime","title":"\ud83d\udcb8 Step 4: Withdraw Anytime","text":"<ul> <li>Go to the <code>Assets</code> tab.</li> <li>Click \"Withdraw\" and confirm.</li> </ul> <p>Your funds + yield are returned in USDC.</p>"}]}
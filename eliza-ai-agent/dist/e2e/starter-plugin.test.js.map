{"version":3,"sources":["../../node_modules/uuid/dist/esm/stringify.js","../../node_modules/uuid/dist/esm/rng.js","../../node_modules/uuid/dist/esm/native.js","../../node_modules/uuid/dist/esm/v4.js","../../e2e/starter-plugin.test.ts"],"sourcesContent":["import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n","import { randomUUID } from 'crypto';\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import { character } from '../src/index.js';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define a minimal TestSuite interface that matches what's needed\ninterface TestSuite {\n  name: string;\n  description: string;\n  tests: Array<{\n    name: string;\n    fn: (runtime: any) => Promise<any>;\n  }>;\n}\n\n// Define minimal interfaces for the types we need\ntype UUID = `${string}-${string}-${string}-${string}-${string}`;\n\ninterface Memory {\n  entityId: UUID;\n  roomId: UUID;\n  content: {\n    text: string;\n    source: string;\n    actions?: string[];\n  };\n}\n\ninterface State {\n  values: Record<string, any>;\n  data: Record<string, any>;\n  text: string;\n}\n\ninterface Content {\n  text: string;\n  source?: string;\n  actions?: string[];\n}\n\nexport class StarterTestSuite implements TestSuite {\n  name = 'starter';\n  description = 'E2E tests for the starter project';\n\n  tests = [\n    {\n      name: 'Character configuration test',\n      fn: async (runtime: any) => {\n        const requiredFields = ['name', 'bio', 'plugins', 'system', 'messageExamples'];\n        const missingFields = requiredFields.filter((field) => !(field in character));\n\n        if (missingFields.length > 0) {\n          throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n        }\n\n        // Additional character property validations\n        if (character.name !== 'Eliza') {\n          throw new Error(`Expected character name to be 'Eliza', got '${character.name}'`);\n        }\n        if (!Array.isArray(character.plugins)) {\n          throw new Error('Character plugins should be an array');\n        }\n        if (!character.system) {\n          throw new Error('Character system prompt is required');\n        }\n        if (!Array.isArray(character.bio)) {\n          throw new Error('Character bio should be an array');\n        }\n        if (!Array.isArray(character.messageExamples)) {\n          throw new Error('Character message examples should be an array');\n        }\n      },\n    },\n    {\n      name: 'Plugin initialization test',\n      fn: async (runtime: any) => {\n        // Test plugin initialization with empty config\n        try {\n          await runtime.registerPlugin({\n            name: 'starter',\n            description: 'A starter plugin for Eliza',\n            init: async () => {},\n            config: {},\n          });\n        } catch (error) {\n          throw new Error(`Failed to register plugin: ${error.message}`);\n        }\n      },\n    },\n    {\n      name: 'Hello world action test',\n      fn: async (runtime: any) => {\n        const message: Memory = {\n          entityId: uuidv4() as UUID,\n          roomId: uuidv4() as UUID,\n          content: {\n            text: 'Can you say hello?',\n            source: 'test',\n            actions: ['HELLO_WORLD'], // Explicitly request the HELLO_WORLD action\n          },\n        };\n\n        const state: State = {\n          values: {},\n          data: {},\n          text: '',\n        };\n        let responseReceived = false;\n\n        // Test the hello world action\n        try {\n          await runtime.processActions(message, [], state, async (content: Content) => {\n            if (content.text === 'hello world!' && content.actions?.includes('HELLO_WORLD')) {\n              responseReceived = true;\n            }\n            return [];\n          });\n\n          if (!responseReceived) {\n            // Try directly executing the action if processActions didn't work\n            const helloWorldAction = runtime.actions.find((a) => a.name === 'HELLO_WORLD');\n            if (helloWorldAction) {\n              await helloWorldAction.handler(\n                runtime,\n                message,\n                state,\n                {},\n                async (content: Content) => {\n                  if (content.text === 'hello world!' && content.actions?.includes('HELLO_WORLD')) {\n                    responseReceived = true;\n                  }\n                  return [];\n                },\n                []\n              );\n            } else {\n              throw new Error('HELLO_WORLD action not found in runtime.actions');\n            }\n          }\n\n          if (!responseReceived) {\n            throw new Error('Hello world action did not produce expected response');\n          }\n        } catch (error) {\n          throw new Error(`Hello world action test failed: ${error.message}`);\n        }\n      },\n    },\n    {\n      name: 'Hello world provider test',\n      fn: async (runtime: any) => {\n        const message: Memory = {\n          entityId: uuidv4() as UUID,\n          roomId: uuidv4() as UUID,\n          content: {\n            text: 'What can you provide?',\n            source: 'test',\n          },\n        };\n\n        const state: State = {\n          values: {},\n          data: {},\n          text: '',\n        };\n\n        // Test the hello world provider\n        try {\n          if (!runtime.providers || runtime.providers.length === 0) {\n            throw new Error('No providers found in runtime');\n          }\n\n          // Find the specific provider we want to test\n          const helloWorldProvider = runtime.providers.find(\n            (p) => p.name === 'HELLO_WORLD_PROVIDER'\n          );\n\n          if (!helloWorldProvider) {\n            throw new Error('HELLO_WORLD_PROVIDER not found in runtime providers');\n          }\n\n          const result = await helloWorldProvider.get(runtime, message, state);\n\n          if (result.text !== 'I am a provider') {\n            throw new Error(`Expected provider to return \"I am a provider\", got \"${result.text}\"`);\n          }\n        } catch (error) {\n          throw new Error(`Hello world provider test failed: ${error.message}`);\n        }\n      },\n    },\n    {\n      name: 'Starter service test',\n      fn: async (runtime: any) => {\n        // Test service registration and lifecycle\n        try {\n          const service = runtime.getService('starter');\n          if (!service) {\n            throw new Error('Starter service not found');\n          }\n\n          if (\n            service.capabilityDescription !==\n            'This is a starter service which is attached to the agent through the starter plugin.'\n          ) {\n            throw new Error('Incorrect service capability description');\n          }\n\n          await service.stop();\n        } catch (error) {\n          throw new Error(`Starter service test failed: ${error.message}`);\n        }\n      },\n    },\n  ];\n}\n\n// Export a default instance of the test suite for the E2E test runner\nexport default new StarterTestSuite();\n"],"mappings":"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","names":[]}
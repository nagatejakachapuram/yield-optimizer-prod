{"version":3,"sources":["../src/agent.ts","../src/index.ts"],"sourcesContent":["// agent.ts\n// ====== Imports ======\n// @ts-ignore: Will be available only in ElizaOS runtime\nlet kv: { set: (key: string, val: string) => Promise<void>; get?: (key: string) => Promise<string | null> }; // Added 'get' for completeness in case it's used elsewhere, though not directly in this file's main logic.\n\ntry {\n  // Attempt to import the ElizaOS KV store\n  const elizaKv = await import(\"@elizaos/kv\");\n  kv = {\n    set: elizaKv.set,\n    get: elizaKv.get // Ensure 'get' is also assigned if available from ElizaOS KV\n  };\n} catch (e) {\n  // Fallback to local file-based KV if ElizaOS KV is not available (e.g., when running agent.ts directly for testing)\n  console.warn(\" Falling back to local KV for agent.ts\");\n  const fs = await import(\"fs/promises\");\n  kv = {\n    set: async (key: string, val: string) => {\n      await fs.writeFile(`.local-kv-${key}.json`, val, \"utf-8\");\n    },\n    get: async (key: string) => { // Added 'get' for the local fallback too\n      try {\n        return await fs.readFile(`.local-kv-${key}.json`, \"utf-8\");\n      } catch (readError) {\n        return null;\n      }\n    },\n  };\n}\n\nimport axios from \"axios\";\n\n// ====== Types ======\ntype RiskLevel = \"low\" | \"high\";\n\ninterface PoolInfo {\n  address: string;\n  apy: number;\n  platform: string;\n  asset: string;\n}\n\ninterface StrategyResult {\n  timestamp: number;\n  trend: \"uptrend\" | \"downtrend\";\n  risk: RiskLevel;\n  selectedPool: PoolInfo;\n}\n\n// ====== Constants ======\nconst DEFILLAMA_API = process.env.DEFILLAMA_API || \"https://yields.llama.fi\"; // Reads from env, with a fallback\nconst COINGECKO_API = process.env.COINGECKO_API || \"https://api.coingecko.com/api/v3\";\nconst USDC_CG_ID = \"usd-coin\";\nconst DAYS_LOOKBACK = 25;\n\n// ====== Trend Detection ======\nasync function isDowntrend(assetId: string): Promise<boolean> {\n  const url = `${COINGECKO_API}/coins/${assetId}/market_chart?vs_currency=usd&days=${DAYS_LOOKBACK}`;\n  const res = await axios.get(url);\n  const prices = res.data.prices.map((p: any) => p[1]);\n\n  if (prices.length < 8) throw new Error(\"Not enough price history for trend detection\");\n\n  const current = prices[prices.length - 1];\n  const day7 = prices[prices.length - 8]; // 7 days ago\n  const day25 = prices[0]; // 25 days ago\n\n  return current < day7 && current < day25;\n}\n\n// ====== Yield Fetchers ======\nasync function getDefiLlamaYields(): Promise<any[]> {\n  const res = await axios.get(`${DEFILLAMA_API}/pools`);\n  return res.data.data;\n}\n\nasync function getBestLowRiskPool(): Promise<PoolInfo | null> {\n  const yields = await getDefiLlamaYields();\n\n  return yields\n    .filter(y =>\n      y.project?.toLowerCase().includes(\"aave\") &&\n      y.apyBase &&\n      y.symbol?.toLowerCase() === 'usdc'\n    )\n    .map(y => ({\n      address: y.pool,\n      apy: y.apyBase,\n      apyBps: Math.round(y.apyBase * 10000),\n      platform: \"Aave\",\n      asset: y.symbol,\n    }))\n    .sort((a, b) => b.apy - a.apy)[0] || null;\n}\n\nasync function getBestHighRiskPool(): Promise<PoolInfo | null> {\n  const yields = await getDefiLlamaYields();\n\n  return yields\n    .filter(y =>\n      y.project?.toLowerCase().includes(\"morpho\") &&\n      y.apyBase &&\n      y.symbol?.toLowerCase() === 'usdc'\n    )\n    .map(y => ({\n      address: y.pool,\n      apy: y.apyBase,\n      apyBps: Math.round(y.apyBase * 10000),\n      platform: \"Morpho\",\n      asset: y.symbol,\n    }))\n    .sort((a, b) => b.apy - a.apy)[0] || null;\n}\n\n\n// ====== Run for a given risk level ======\nasync function runForRisk(risk: RiskLevel) {\n  try {\n    const downtrend = await isDowntrend(USDC_CG_ID);\n    const trend: \"uptrend\" | \"downtrend\" = downtrend ? \"downtrend\" : \"uptrend\";\n\n    const bestPool =\n      risk === \"low\" ? await getBestLowRiskPool() : await getBestHighRiskPool();\n\n    if (!bestPool) {\n      console.warn(` No ${risk}-risk pool found.`);\n      return;\n    }\n\n    const result: StrategyResult = {\n      timestamp: Date.now(),\n      trend,\n      risk,\n      selectedPool: bestPool,\n    };\n\n    await kv.set(`strategy:${risk}`, JSON.stringify(result));\n    console.log(` Stored ${risk}-risk strategy:`, result);\n\n  } catch (err) {\n    console.error(` Failed to process ${risk} strategy:`, err);\n  }\n}\n\n// ====== Main Runner ======\nexport async function main() {\n  await runForRisk(\"low\");\n  await runForRisk(\"high\");\n}\n\n// ====== Run Periodically or Once ======\n// This block ensures the agent logic runs when agent.ts is executed directly,\n// or when imported and called by src/index.ts. The setInterval is appropriate here.\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const INTERVAL_MS = 15 * 60 * 1000; // 15 minutes\n\n  console.log(\" Eliza strategy agent started (15 min interval)\");\n\n  // Initial run\n  await main();\n\n  // Run every 15 mins (only if long-running process like `node agent.js`)\n  setInterval(() => {\n    main().catch(err => console.error(\"Agent error:\", err));\n  }, INTERVAL_MS);\n}","// src/index.ts\n\n// ====== Imports for KV and Agent Main Logic ======\n// We need 'kv' for the action handler to retrieve stored strategies.\n// The `kv` object is expected to have 'get' and 'set' methods.\n// When running within ElizaOS, it typically provides its own KV via '@elizaos/kv'.\n// When testing the plugin directly, or if ElizaOS KV isn't available, we need a fallback.\nlet kv: { get: (key: string) => Promise<string | null>; set: (key: string, val: string) => Promise<void> };\n\ntry {\n  const elizaKv = await import(\"@elizaos/kv\");\n  kv = {\n    get: elizaKv.get,\n    set: elizaKv.set\n  };\n} catch (e) {\n  console.warn(\" Falling back to local KV for src/index.ts (plugin actions)\");\n  const fs = await import(\"fs/promises\");\n  kv = {\n    get: async (key: string) => {\n      try {\n        return await fs.readFile(`.local-kv-${key}.json`, \"utf-8\");\n      } catch (readError) {\n        return null; // Return null if file not found or other read error\n      }\n    },\n    set: async (key: string, val: string) => {\n      await fs.writeFile(`.local-kv-${key}.json`, val, \"utf-8\");\n    },\n  };\n}\n\n\n// Import the 'main' function from your agent logic file (e.g., src/agent.ts)\n// This `agentMain` function contains your strategy calculation and storage logic,\n// including its own internal setInterval.\nimport { main as agentMain } from './agent';\n\n// Define a local function to orchestrate the start-up of your agent's service logic.\n// This is called once when the ElizaOS plugin initializes.\nasync function startApplication() {\n  try {\n    // Call the imported agent's main function.\n    // The setInterval inside agentMain will handle periodic execution.\n    await agentMain();\n    console.log(\"Initial yield strategies calculated and stored by YieldBot agent.\");\n  } catch (error) {\n    console.error(\"YieldBot agent failed during initial strategy calculation:\", error);\n  }\n}\n\n// Call the start-up function immediately when the plugin loads.\n// This ensures your strategies are calculated and the 15-minute interval begins.\nstartApplication();\n\n\n// ====== ElizaOS Plugin Framework Imports ======\nimport type { Plugin } from '@elizaos/core';\nimport {\n  type Action,\n  type Content,\n  type GenerateTextParams, // Still imported, but not used in the 'models' block now\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType, // Still imported, but not used in the 'models' block now\n  type Provider,\n  type ProviderResult,\n  Service,\n  type State,\n  logger,\n} from '@elizaos/core';\nimport { z } from 'zod'; // For schema validation\n\n// ====== Configuration Schema (kept for example) ======\nconst configSchema = z.object({\n  EXAMPLE_PLUGIN_VARIABLE: z\n    .string()\n    .min(1, 'Example plugin variable is not provided')\n    .optional()\n    .transform((val) => {\n      if (!val) {\n        console.warn('Warning: Example plugin variable is not provided');\n      }\n      return val;\n    }),\n});\n\n// ====== New: Define the Zod schema for GET_YIELD_STRATEGY action parameters ======\nconst GetYieldStrategyParamsSchema = z.object({\n  risk: z.enum(['low', 'high'], {\n    errorMap: (issue, ctx) => {\n      if (issue.code === z.ZodIssueCode.invalid_enum_value) {\n        return { message: `Risk level must be 'low' or 'high'. Received: ${ctx.data}` };\n      }\n      return { message: ctx.defaultError };\n    },\n  }),\n});\n\n// ====== New: Define the GET_YIELD_STRATEGY Action Handler ======\nconst getYieldStrategyAction: Action = {\n  name: 'GET_YIELD_STRATEGY',\n  similes: ['GET_STRATEGY', 'FETCH_YIELD', 'CHECK_YIELD_OPPORTUNITIES', 'YIELD_STRATEGY_INFO'],\n  description: 'Fetches the current yield optimization strategy for a given risk level (low or high).',\n\n  validate: async (_runtime: IAgentRuntime, _message: Memory, _state: State): Promise<boolean> => {\n    // This action is always valid for the LLM to call if it provides the parameters.\n    return true;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    options: any, // Options will contain the parsed parameters from the LLM\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ) => {\n    try {\n      logger.info('Handling GET_YIELD_STRATEGY action');\n\n      // Validate the incoming parameters from the LLM using Zod\n      const { risk } = GetYieldStrategyParamsSchema.parse(options);\n\n      // Fetch the strategy from the KV store populated by agent.ts\n      const strategyKey = `strategy:${risk}`;\n      const storedStrategy = await kv.get(strategyKey);\n\n      let responseText: string;\n      if (storedStrategy) {\n        const strategy = JSON.parse(storedStrategy);\n        // Format the output clearly as JSON\n        responseText = `Here is the current ${risk}-risk yield strategy:\\n\\`\\`\\`json\\n${JSON.stringify(strategy, null, 2)}\\n\\`\\`\\``;\n        logger.info(`Successfully retrieved ${risk}-risk strategy.`);\n      } else {\n        responseText = `I could not find a ${risk}-risk yield strategy at the moment. The data might not have been calculated yet or there was an issue. Please try again later.`;\n        logger.warn(`No ${risk}-risk strategy found in KV.`);\n      }\n\n      const responseContent: Content = {\n        text: responseText,\n        actions: ['GET_YIELD_STRATEGY'], // Indicate which action produced this response\n        source: message.content.source, // Maintain the source of the original message\n      };\n\n      await callback(responseContent); // Send the response back to the user\n\n      return responseContent; // Return the content\n    } catch (error) {\n      logger.error('Error in GET_YIELD_STRATEGY action:', error);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const errorContent: Content = {\n        text: `An error occurred while fetching the yield strategy: ${errorMessage}. Please check the server logs for details.`,\n        actions: ['GET_YIELD_STRATEGY'],\n        source: message.content.source,\n      };\n      await callback(errorContent); // Inform the user about the error\n      throw error; // Re-throw to propagate the error within ElizaOS\n    }\n  },\n\n  // Add examples for the LLM to learn from (crucial for good action calling)\n  examples: [\n    [\n      {\n        name: 'user',\n        content: {\n          text: 'What is the low-risk strategy?',\n        },\n      },\n      {\n        name: 'YieldBot', // Make sure this matches your character's 'name' in character.json\n        content: {\n          // This is the XML format the LLM needs to generate\n          text: '<call:GET_YIELD_STRATEGY><risk>low</risk></call:GET_YIELD_STRATEGY>',\n          actions: ['GET_YIELD_STRATEGY'],\n        },\n      },\n    ],\n    [\n      {\n        name: 'user',\n        content: {\n          text: 'Tell me about the high-risk yield.',\n        },\n      },\n      {\n        name: 'YieldBot',\n        content: {\n          text: '<call:GET_YIELD_STRATEGY><risk>high</risk></call:GET_YIELD_STRATEGY>',\n          actions: ['GET_YIELD_STRATEGY'],\n        },\n      },\n    ],\n    [\n      {\n        name: 'user',\n        content: {\n          text: 'I need a safe investment strategy.',\n        },\n      },\n      {\n        name: 'YieldBot',\n        content: {\n          text: '<call:GET_YIELD_STRATEGY><risk>low</risk></call:GET_YIELD_STRATEGY>',\n          actions: ['GET_YIELD_STRATEGY'],\n        },\n      },\n    ],\n    [\n      {\n        name: 'user',\n        content: {\n          text: 'What are the current high return options?',\n        },\n      },\n      {\n        name: 'YieldBot',\n        content: {\n          text: '<call:GET_YIELD_STRATEGY><risk>high</risk></call:GET_YIELD_STRATEGY>',\n          actions: ['GET_YIELD_STRATEGY'],\n        },\n      },\n    ],\n  ],\n};\n\n\n// ====== Example Components (Optional, can remove if not needed) ======\n// Keeping these for now, as they were in your original provided plugin code.\n// You can remove these if you only want the YieldBot functionality.\nconst helloWorldAction: Action = {\n  name: 'HELLO_WORLD',\n  similes: ['GREET', 'SAY_HELLO'],\n  description: 'Responds with a simple hello world message',\n  validate: async (_runtime: IAgentRuntime, _message: Memory, _state: State): Promise<boolean> => true,\n  handler: async ( _runtime: IAgentRuntime, message: Memory, _state: State, _options: any, callback: HandlerCallback, _responses: Memory[] ) => {\n    try {\n      logger.info('Handling HELLO_WORLD action');\n      const responseContent: Content = { text: 'hello world!', actions: ['HELLO_WORLD'], source: message.content.source, };\n      await callback(responseContent);\n      return responseContent;\n    } catch (error) { logger.error('Error in HELLO_WORLD action:', error); throw error; }\n  },\n  examples: [\n    [{ name: '{{name1}}', content: { text: 'Can you say hello?', }, },\n     { name: '{{name2}}', content: { text: 'hello world!', actions: ['HELLO_WORLD'], }, },\n    ],\n  ],\n};\n\nconst helloWorldProvider: Provider = {\n  name: 'HELLO_WORLD_PROVIDER',\n  description: 'A simple example provider',\n  get: async ( _runtime: IAgentRuntime, _message: Memory, _state: State ): Promise<ProviderResult> => {\n    return { text: 'I am a provider', values: {}, data: {}, };\n  },\n};\n\nexport class StarterService extends Service {\n  static serviceType = 'starter';\n  capabilityDescription = 'This is a starter service which is attached to the agent through the starter plugin.';\n  constructor(runtime: IAgentRuntime) { super(runtime); }\n  static async start(runtime: IAgentRuntime) {\n    logger.info('*** Starting starter service ***');\n    const service = new StarterService(runtime);\n    return service;\n  }\n  static async stop(runtime: IAgentRuntime) {\n    logger.info('*** Stopping starter service ***');\n    const service = runtime.getService(StarterService.serviceType);\n    if (!service) { throw new Error('Starter service not found'); }\n    service.stop();\n  }\n  async stop() { logger.info('*** Stopping starter service instance ***'); }\n}\n\n\n// ====== ElizaOS Plugin Definition ======\nconst plugin: Plugin = {\n  name: 'yield-bot-plugin', // Giving your plugin a more specific name\n  description: 'Plugin for the YieldBot agent, managing yield strategy calculations and fetching.',\n  // Set a default priority. Adjust if you have other plugins that might conflict.\n  priority: 0,\n  config: {\n    EXAMPLE_PLUGIN_VARIABLE: process.env.EXAMPLE_PLUGIN_VARIABLE,\n  },\n  async init(config: Record<string, string>) {\n    logger.info('*** Initializing YieldBot plugin ***');\n    try {\n      const validatedConfig = await configSchema.parseAsync(config);\n      for (const [key, value] of Object.entries(validatedConfig)) {\n        if (value) process.env[key] = value;\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        throw new Error(\n          `Invalid plugin configuration: ${error.errors.map((e) => e.message).join(', ')}`\n        );\n      }\n      throw error;\n    }\n  },\n  // IMPORTANT: REMOVED THE `models` BLOCK HERE.\n  // This allows ElizaOS to use the modelProvider specified in your character.json\n  // (e.g., local-ai or openai) instead of hardcoding responses.\n  routes: [\n    {\n      name: 'helloworld',\n      path: '/helloworld',\n      type: 'GET',\n      handler: async (_req: any, res: any) => {\n        res.json({ message: 'Hello World from YieldBot Plugin!', });\n      },\n    },\n  ],\n  events: {\n    MESSAGE_RECEIVED: [\n      async (params) => {\n        logger.info('YieldBot Plugin: MESSAGE_RECEIVED event received');\n        logger.debug(Object.keys(params)); // Use debug for less critical logs\n      },\n    ],\n    // You can keep or remove other event handlers as needed\n  },\n  services: [StarterService], // If you don't need StarterService, you can remove it.\n  actions: [helloWorldAction, getYieldStrategyAction], // IMPORTANT: Added your new action here!\n  providers: [helloWorldProvider], // If you don't need helloWorldProvider, you can remove it.\n};\n\nexport default plugin;"],"mappings":"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","names":["kv"]}
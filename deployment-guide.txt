Follow these steps carefully to deploy your contracts and configure automation.



Step 1: Deploy the Contracts
Deploy YVault.sol:

When deploying, you need to provide the constructor arguments:

_token: The address of the ERC20 asset the vault will accept (e.g., USDC, DAI).

_name: e.g., "My Automated Vault".

_symbol: e.g., "maVLT".

_vaultOwnerSafe: Use your wallet address for now. We will transfer ownership in a later step.

Take note of the deployed YVault address.



Deploy AutomationOwner.sol:

The only constructor argument is _vaultAddress. Provide the address of the YVault you just deployed.

Take note of the deployed AutomationOwner address.

Transfer Vault Ownership:

Go to your deployed YVault contract.

Call the transferVaultOwnership function.

For the newOwner argument, provide the address of your deployed AutomationOwner contract.

After this transaction, the AutomationOwner contract is now the sole manager of your vault.




Step 2: Automate allocateFunds and reportIfNeeded
These two actions are managed by the checkUpkeep and performUpkeep functions within the YVault contract itself.

Go to the Chainlink Automation App: automation.chain.link

Register a New Upkeep:

Select your network (e.g., Ethereum Sepolia).

Click "Register new Upkeep".

Choose Trigger: Select "Custom logic".

Enter Contract Address: Paste your deployed YVault address. Chainlink will verify that it's compatible.

Configure Upkeep Details:

Upkeep name: "YVault Maintenance".

Gas limit: Start with a generous value like 500000. You can adjust this later by observing the gas used in actual runs.

Starting balance (LINK): Fund the upkeep with testnet LINK tokens. 5 LINK is a good start.

Check data: Leave this blank (0x).

Register: Confirm the transaction in your wallet.

That's it! The Chainlink Automation network will now periodically call checkUpkeep on your YVault. If it returns true, the network will execute performUpkeep, which will automatically allocate idle funds or report from the strategy as needed.




Step 3: Automate setStrategy with Eliza Integration
This is the most advanced part and involves an off-chain component to read Eliza's data.

Set Up an External Adapter (Off-Chain):

You need a service that can fetch and parse the JSON from Eliza's API. This is what Chainlink External Adapters are for.

You can build a simple serverless function (e.g., AWS Lambda, Google Cloud Function) that:
a.  Has an endpoint that Chainlink can call.
b.  Fetches data from Eliza's API.
c.  Compares the new strategy from Eliza to the vault's current strategy.
d.  If a better strategy is found, it returns the new strategy's address.

For a detailed guide, refer to the Chainlink External Adapters documentation.

Register a "Custom Logic" Upkeep for Strategy Updates:

This process is similar to Step 2, but it will call your AutomationOwner contract.

Important: You will need to create a new, separate Upkeep for this task.

Configure the updateVaultStrategy Upkeep:

Go to the Chainlink Automation App and register a new "Custom logic" upkeep.

Target Contract: Use the address of a custom checkUpkeep contract you would deploy that interacts with your external adapter via Chainlink Functions or another oracle service. This contract's checkUpkeep would return true and the new strategy address in performData when your off-chain logic determines a switch is needed.

Perform Action: The performUpkeep on this custom contract would then call AutomationOwner.updateVaultStrategy(newStrategyAddress).

Authorize the Upkeep:

Once your strategy update upkeep is registered, you will get a unique address for it.

Go to your AutomationOwner contract.

Call the setUpkeepContract function, passing in the address of the Chainlink Upkeep you just created.